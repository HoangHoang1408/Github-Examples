name: AWS Terraform Deploy

on:
  push:
    branches: [main, develop]
    paths:
      - 'terraform/**'
      - '.github/workflows/aws-terraform-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'terraform/**'
      - '.github/workflows/aws-terraform-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

permissions:
  id-token: write   # Required for OIDC
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Security and validation job
  validate:
    name: Validate & Security Scan
    runs-on: ubuntu-latest
    outputs:
      tf-fmt-check: ${{ steps.fmt.outputs.exitcode }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
        working-directory: terraform

      - name: Terraform Init (for validation)
        run: terraform init -backend=false
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Run TFSec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform
          soft_fail: true

      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform
          framework: terraform
          soft_fail: true

  # Plan job for all environments
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref != 'refs/heads/main')
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event_name == 'workflow_dispatch' && fromJSON('["' + github.event.inputs.environment + '"]') || fromJSON('["dev"]') }}
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-TerraformPlan
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION || 'us-east-1' }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"
        working-directory: terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="environments/${{ matrix.environment }}.tfvars" \
            -out=${{ matrix.environment }}.tfplan \
            -detailed-exitcode
        working-directory: terraform
        continue-on-error: true

      - name: Save Plan Output
        if: steps.plan.outputs.exitcode == 2
        run: terraform show -no-color ${{ matrix.environment }}.tfplan > ${{ matrix.environment }}-plan.txt
        working-directory: terraform

      - name: Upload Plan Artifact
        if: steps.plan.outputs.exitcode == 2
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: terraform/${{ matrix.environment }}.tfplan
          retention-days: 7

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request' && steps.plan.outputs.exitcode == 2
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/${{ matrix.environment }}-plan.txt', 'utf8');
            const maxLength = 65536;
            const truncatedPlan = plan.length > maxLength ? plan.substring(0, maxLength) + '\n...(truncated)' : plan;
            
            const output = `## Terraform Plan - ${{ matrix.environment }}
            
            \`\`\`terraform
            ${truncatedPlan}
            \`\`\`
            
            **Plan Status**: ${{ steps.plan.outputs.exitcode == 2 && 'Changes detected' || 'No changes' }}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Plan Status Check
        if: steps.plan.outputs.exitcode == 1
        run: exit 1

  # Apply job for production deployments
  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [validate, plan]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event_name == 'workflow_dispatch' && fromJSON('["' + github.event.inputs.environment + '"]') || fromJSON('["prod"]') }}
    
    environment: 
      name: ${{ matrix.environment }}
      url: ${{ steps.output.outputs.application_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-TerraformApply
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Download Plan Artifact
        if: github.event_name == 'workflow_dispatch'
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: terraform/

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION || 'us-east-1' }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"
        working-directory: terraform

      - name: Terraform Apply (from plan)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve ${{ matrix.environment }}.tfplan
        working-directory: terraform

      - name: Terraform Apply (direct)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          terraform apply \
            -var-file="environments/${{ matrix.environment }}.tfvars" \
            -auto-approve
        working-directory: terraform

      - name: Get Terraform Outputs
        id: output
        run: |
          echo "application_url=$(terraform output -raw application_url 2>/dev/null || echo 'N/A')" >> $GITHUB_OUTPUT
          echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY
        working-directory: terraform

      - name: Notify Deployment Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const output = `🚀 **Deployment Successful** - ${{ matrix.environment }}
            
            **Environment**: ${{ matrix.environment }}
            **Application URL**: ${{ steps.output.outputs.application_url }}
            **Commit**: ${context.sha.substring(0, 7)}
            **Triggered by**: ${context.actor}
            `;
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: output
            });

  # Destroy job (manual only)
  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    environment: 
      name: ${{ github.event.inputs.environment }}-destroy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-TerraformDestroy
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION || 'us-east-1' }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"
        working-directory: terraform

      - name: Terraform Destroy
        run: |
          terraform destroy \
            -var-file="environments/${{ github.event.inputs.environment }}.tfvars" \
            -auto-approve
        working-directory: terraform

      - name: Notify Destruction
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const output = `💥 **Infrastructure Destroyed** - ${{ github.event.inputs.environment }}
            
            **Environment**: ${{ github.event.inputs.environment }}
            **Commit**: ${context.sha.substring(0, 7)}
            **Triggered by**: ${context.actor}
            
            ⚠️ All resources have been permanently deleted.
            `;
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: output
            });
